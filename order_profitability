-----------------------
--ORDER PROFITABILITY--
-----------------------
WITH date_param AS (
  SELECT 
    start_date_input
  , end_date_input
  FROM (SELECT 
    CAST('2022-01-01' AS DATE) AS start_date_input
  , CAST("2022-11-30" AS DATE) AS end_date_input) 
),
--------------
--ORDER BASE--
--------------
order_base AS (
SELECT
  c.order_code
, r.lg_zone AS zone
, r.lg_city AS city
, r.vertical
, o.vendor_name
, s.delivery_type
, CASE WHEN c.estimated_commission_percentage IS NULL THEN 0 ELSE c.estimated_commission_percentage END AS est_comm_pcnt
, delivery_fee_local
, service_fee_total_local
, subtotal_local
, total_value_local
, CASE WHEN estimated_commission_percentage IS NULL OR subtotal_local IS NULL THEN 0 
       ELSE ((estimated_commission_percentage / 100) * subtotal_local) 
       END AS commission_base_local
, v.is_voucher_used
, v.voucher.type
, v.voucher.purpose
-- , v.voucher.value_local AS voucher_value_local
, CASE WHEN voucher.foodpanda_subsidized_value_local IS NULL THEN 0 ELSE voucher.foodpanda_subsidized_value_local END AS voucher_value_paid_foodora

FROM `fulfillment-dwh-production.pandata_report.se_order_commissions` AS c
LEFT JOIN `fulfillment-dwh-production.pandata_curated.pd_orders` AS o 
       ON c.order_code = o.code 
      AND c.global_entity_id = o.global_entity_id
      AND c.order_uuid = o.uuid
LEFT JOIN `fulfillment-dwh-production.curated_data_shared.orders_v2` s
       ON c.order_code = s.order_code
      AND c.global_entity_id = s.entity_id
LEFT JOIN `fulfillment-dwh-production.pandata_report.regional_eu__pd_orders_agg_vouchers`  AS v
       ON o.uuid = v.uuid
LEFT JOIN `foodora-bi-se.bl_bi.order_rank` AS r 
       ON c.order_code = r.order_code

WHERE c.global_entity_id = "OP_SE"
  AND c.order_created_date_local BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND o.created_date_utc BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND s.created_date BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND v.created_date_utc BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param) 
  AND r.created_date_utc BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND o.is_gross_order IS TRUE 
  AND s.vendor.order_status = "completed"
),
--------------
--RIDER BASE--
--------------
rider_base AS (
SELECT 
  platform_order_code AS rider_order_code
, STRING_AGG(DISTINCT vehicle_bag) AS bag_types
, COUNT(rider_id) AS number_of_riders
, SUM(costs) * 1.43 AS rider_cpo
FROM `fulfillment-dwh-production.curated_data_shared.utr_timings` 
WHERE created_date BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND country_code = "se"
GROUP BY rider_order_code
),
----------------
--CONTACT BASE--
----------------
contacts AS (
  SELECT 
  order_id
, contact_reason_l3
, ROW_NUMBER() OVER (PARTITION BY c.global_entity_id, c.order_id ORDER BY c.creation_timestamp DESC) AS rank_contact
FROM `fulfillment-dwh-production.curated_data_shared_gcc_service.all_contacts` c
WHERE global_entity_id = 'OP_SE'
  AND created_date_localtime BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param) + 30
  AND order_id IS NOT NULL 
),
------------------
--STACKED ORDERS--
------------------
base_prep AS (
SELECT
  order_base.*
, rider_base.* EXCEPT(rider_order_code, rider_cpo)
, cc.* EXCEPT(order_id, rank_contact)

, CASE WHEN rider_cpo IS NULL THEN 0 ELSE rider_cpo END AS total_rider_cpo
, CASE WHEN delivery_type = "PICKUP" THEN "PICKUP"
       WHEN number_of_riders = 0 OR number_of_riders IS NULL THEN "VD"  
       WHEN number_of_riders = 1 THEN "regular_delivery"  
       WHEN number_of_riders > 1 THEN "multiple_delivery"  
       END AS delivery_group
FROM order_base
LEFT JOIN rider_base
       ON order_base.order_code = rider_base.rider_order_code
LEFT JOIN (SELECT * FROM contacts WHERE rank_contact = 1) AS cc
       ON order_base.order_code = cc.order_id 
),
--------------
--FINANCIALS--
--------------
profit_prep AS (
SELECT 
  base_prep.* 

--REVENUE-- 
, CASE WHEN delivery_type != "VENDOR_DELIVERY" THEN (/*for OD and PICKUP*/ 
    commission_base_local 
  + delivery_fee_local 
  + service_fee_total_local)
  ELSE (/*for VD*/ 
    commission_base_local  
  + service_fee_total_local)
  END AS value_taken_in_local

--LOSS--
, CASE WHEN delivery_type != "VENDOR_DELIVERY" THEN (/*for OD and PICKUP*/ 
    total_rider_cpo
  + voucher_value_paid_foodora)
  ELSE voucher_value_paid_foodora /*for VD*/ 
  END AS value_taken_out_local

FROM base_prep
),

---------------
--PROFIT/LOSS--
---------------
end_result AS (
SELECT 
  profit_prep.*
, value_taken_in_local - value_taken_out_local AS net_order_result
, CASE WHEN ( value_taken_in_local - value_taken_out_local ) = 0 THEN "break-even"
       WHEN ( value_taken_in_local - value_taken_out_local ) > 0 THEN "profit"
       WHEN ( value_taken_in_local - value_taken_out_local ) < 0 THEN "loss"
       END AS profit_group
 FROM profit_prep
)



SELECT 
  profit_group	
, delivery_type
, delivery_group
, COUNT(DISTINCT order_code) AS number_of_orders
, SUM(net_order_result) AS profit_loss
FROM end_result
GROUP BY 1,2,3
ORDER BY 1,2,3,4 DESC

-- SELECT * FROM end_result 



/* 
income 
1. sub total order value * commision 
2. service fee 
3. delivery fee for OD >>>>>> in case of free delivery, vendor is paying) 

loss 
1. rider cost >>>>>> salary, always * 1.43 for tax purposes
2. vouchers >>>>>> only how much foodora is paying 
3. contact cost >>>>>> added in the query, not in the cost yet >> contact cost is somewhere between 22 and 38 sek per contact made
4. joker data >>>>>> not added yet
5. gift data  >>>>>> not added yet 

-- refunds >>>> not needed since baskets are updated and item is removed 
*/ 
