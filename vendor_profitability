WITH date_param AS (
  SELECT 
    start_date_input
  , end_date_input
  FROM (
    SELECT CAST('2022-09-23' AS DATE) AS start_date_input
  , CAST("2022-10-23" AS DATE) AS end_date_input) 
),
order_base AS (
SELECT
  c.order_code
, o.vendor_name
, s.delivery_type
, c.estimated_commission_percentage
, delivery_fee_local
, service_fee_total_local
, subtotal_local
, total_value_local
, CASE WHEN estimated_commission_percentage IS NULL OR subtotal_local IS NULL THEN 0 
       ELSE ((estimated_commission_percentage/100) * subtotal_local) 
       END AS commission_base_local

FROM `fulfillment-dwh-production.pandata_report.se_order_commissions` AS c
LEFT JOIN `fulfillment-dwh-production.pandata_curated.pd_orders` AS o 
       ON c.order_code = o.code 
      AND c.global_entity_id = o.global_entity_id
      AND c.order_uuid = o.uuid
LEFT JOIN `fulfillment-dwh-production.curated_data_shared.orders_v2` s
       ON c.order_code = s.order_code
      AND c.global_entity_id = s.entity_id

WHERE c.global_entity_id = "OP_SE"
  AND c.order_created_date_local BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND o.created_date_utc BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND s.created_date BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND o.is_gross_order IS TRUE 
  AND s.vendor.order_status = "completed"
),
rider_base AS (
SELECT 
  platform_order_code AS rider_order_code
, STRING_AGG(DISTINCT vehicle_bag) AS bag_types
, COUNT(rider_id) AS number_of_riders
, CASE WHEN COUNT(rider_id) = 1 THEN "regular_delivery"  
       WHEN COUNT(rider_id) > 1 THEN "multiple_delivery" 
       END AS delivery_group
, SUM(costs) * 1.43 AS total_rider_cpo
FROM `fulfillment-dwh-production.curated_data_shared.utr_timings` 
WHERE created_date BETWEEN (SELECT start_date_input FROM date_param) AND (SELECT end_date_input FROM date_param)    
  AND country_code = "se"
GROUP BY 1
),

order_profitability AS (
SELECT
  order_base.*
, rider_base.* EXCEPT(rider_order_code)
, (commission_base_local + delivery_fee_local + service_fee_total_local) AS order_take_in_local
, CASE WHEN total_rider_cpo IS NULL THEN 0 ELSE total_rider_cpo   /* + voucher_value_used */  END AS order_take_out_local
FROM order_base
LEFT JOIN rider_base 
       ON order_base.order_code = rider_base.rider_order_code
), 

prep AS (
SELECT 
  order_profitability.* 
, (order_take_in_local - order_take_out_local) AS net_profit_order
, CASE WHEN (order_take_in_local - order_take_out_local) = 0 THEN "break-even"
       WHEN (order_take_in_local - order_take_out_local) > 0 THEN "profit"
       WHEN (order_take_in_local - order_take_out_local) < 0 THEN "loss"
       END AS profit_group
        

FROM order_profitability
)



-- SELECT * FROM prep 



SELECT 
  vendor_name
, profit_group	
, delivery_type
, delivery_group
, COUNT(DISTINCT order_code) AS number_of_orders
, SUM(net_profit_order) AS profit_loss
FROM prep
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4 DESC



-- :::::::::to add:::::::::
-- voucher data 
-- joker data ? 
-- city, zone, vertical from order_rank 
-- refunds 
-- number of contacts 
-- :::::::::::::::::::::::

/* 
income 
1. sub total order value * commision 
2. service fee 
3. delivery fee (in case of free delivery, vendor is paying) 

loss 
1. rider cost 
2. vouchers
3. (should we include refunds) ?

*/ 

